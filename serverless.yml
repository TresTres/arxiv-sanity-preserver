
service: asp2
app: asp2

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, "dev"}
  region: "us-east-2"
  # can replace with iamRoleStatements later
  role: "arn:aws:iam::555989344246:role/asp2_role" 

package:
  exclude:
      - test/**
      - playground/**
      - layers/**


functions:
  fetch_entry_data:
    handler: lambdas/fetch_entry_data.main
    environment:
      TABLE_NAME: ${self:custom.resourceNames.dynamoTable}
  
  process_stream:
    handler: lambdas/process_stream.main
    dependsOn:
      - dynamoDBInstance
    events: 
      - stream:
          type: dynamodb 
          arn: ${self:custom.ARN.dynamoStream}
          batchSize: 100
          startingPosition: LATEST
          maximumRetryAttempts: 1
          enabled: True
    environment:
      BUCKET_NAME: ${self:custom.resourceNames.s3Bucket}


  extract_text:
    handler: lambdas/extract_text.main
    events:
      - s3:
          bucket: ${self:custom.resourceNames.s3Bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: pdf/
            - suffix: .pdf
          existing: true

    environment: 
      SNS_ARN: ${self:custom.ARN.snsTextractTopic}
      ROLE_ARN: ${self:provider.role}

    
  output_text:
    handler: lambdas/output_text.main
    events:
      - sns: 
          topicName: ${self:custom.resourceNames.snsTextractTopic}
          arn: ${self:custom.ARN.snsTextractTopic}
  
custom:
  pythonRequirements:
    dockerizePip: non-linux

  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}


  resourceNames:
    s3Bucket: ${self:service}-file-bucket
    snsTextractTopic: ${self:service}-textract
    dynamoTable: ${self:service}-fetch-results

  ARN:
    snsTextractTopic:
      Fn::Join: 
        - ":" 
        - - "arn:aws:sns:${self:custom.region}"
          - Ref: "AWS::AccountId"
          - "${self:custom.resourceNames.snsTextractTopic}"
    dynamoTable:
      Fn::Join:
        - ":"
        - - "arn:aws:dynamodb:${self:custom.region}"
          - Ref: "AWS::AccountId"
          - "table/${self:custom.resourceNames.dynamoTable}"
    dynamoStream: !GetAtt dynamoDBInstance.StreamArn



resources:
  Resources:
    dynamoDBInstance:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.resourceNames.dynamoTable}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - 
            AttributeName: "rawid"
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: "rawid"
            AttributeType: "S"
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    fileBucket:
      Type: AWS::S3::Bucket 
      Properties:
        BucketName: ${self:custom.resourceNames.s3Bucket}
        AccessControl: Private
        PublicAccessBlockConfiguration: 
            BlockPublicAcls: True
            BlockPublicPolicy: True
            IgnorePublicAcls: True
            RestrictPublicBuckets: True

    fileBucketPolicy:
      Type: AWS::S3::BucketPolicy 
      Properties:
        Bucket: 
          Ref: fileBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: 
                AWS: 
                  - ${self:provider.role}
              Action: 's3:*'
              Resource: 'arn:aws:s3:::${self:custom.resourceNames.s3Bucket}'
      
    snsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:custom.resourceNames.snsTextractTopic}



plugins:
  - serverless-python-requirements